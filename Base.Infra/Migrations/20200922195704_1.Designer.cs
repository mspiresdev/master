// <auto-generated />
using System;
using Base.Infra.Contextos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
//using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Base.Infra.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20200922195704_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Base.Domain.Entidades.Assunto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao");

                    b.HasKey("Id");

                    b.ToTable("Assunto");
                });

            modelBuilder.Entity("Base.Domain.Entidades.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Autor");
                });

            modelBuilder.Entity("Base.Domain.Entidades.Livro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnoPublicacao");

                    b.Property<int>("Edicao");

                    b.Property<string>("Editora");

                    b.Property<decimal>("Preco");

                    b.Property<string>("Titulo");

                    b.HasKey("Id");

                    b.ToTable("Livro");
                });

            modelBuilder.Entity("Base.Domain.Entidades.LivroAssunto", b =>
                {
                    b.Property<int?>("Livro_Id");

                    b.Property<int?>("Assunto_Id");

                    b.HasKey("Livro_Id", "Assunto_Id");

                    b.HasIndex("Assunto_Id");

                    b.ToTable("LivroAssunto");
                });

            modelBuilder.Entity("Base.Domain.Entidades.LivroAutor", b =>
                {
                    b.Property<int?>("Livro_Id");

                    b.Property<int?>("Autor_Id");

                    b.HasKey("Livro_Id", "Autor_Id");

                    b.HasIndex("Autor_Id");

                    b.ToTable("LivroAutor");
                });

            modelBuilder.Entity("Base.Domain.Entidades.LivroAssunto", b =>
                {
                    b.HasOne("Base.Domain.Entidades.Assunto", "Assunto")
                        .WithMany()
                        .HasForeignKey("Assunto_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Base.Domain.Entidades.Livro", "Livro")
                        .WithMany("Assuntos")
                        .HasForeignKey("Livro_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Base.Domain.Entidades.LivroAutor", b =>
                {
                    b.HasOne("Base.Domain.Entidades.Autor", "Autor")
                        .WithMany()
                        .HasForeignKey("Autor_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Base.Domain.Entidades.Livro", "Livro")
                        .WithMany("Autors")
                        .HasForeignKey("Livro_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
